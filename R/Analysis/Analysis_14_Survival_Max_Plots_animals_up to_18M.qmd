---
title: "Hematological Clock 016" 
subtitle: "(Sex :`r params$sex`, Strain:`r params$strain`, Dataset:`r params$dataset`, Method to calculate Acceleration:`r params$method`) "

author: "Jorge Martinez-Romero"
date: "2023-07-28"
format: html 
params:
  sex: "All" # "F", "M", "All". 
  strain: "All" # "B6", "HET3", "DO", "All"
  method: "differences" # Calculate age acceleration as the "differences" between predicted age and chronological age or as "residuals" after regresing predicted age on chronological age using a non linear regresssion
  dataset: "All_held_out" #Select the dataset in where to perform analyses: "All","vald","validate2", "All_held_out","train"
toc: true   
self-contained: true  
---


## DATA ANALYSIS (SURVIVAL)
Version of the analysis 9 including filtering the slope analyses to include only samples up to 81 weeks (Line 878+)


```{r setup, include=FALSE}
Sys.setlocale(category = "LC_ALL", locale = "Greek")
knitr::opts_chunk$set(echo = TRUE)
patho<-"W:/0016_Hematological_clock_2023_Git/"
knitr::opts_chunk$set(echo=TRUE, warning=FALSE, messages=FALSE, comment = NA, root.dir = patho, fig.pos = 'H')
options(max.print=2000,future.globals.maxSize = 4000 * 1024^5)
```

## Parameters
### Explain parameters.
- sex: "F".  Select sex: "F", "M", "All".
- strain: "All".  Select strain: "B6", "HET3", "DO", "All".
- method: "differences".  Calculate age acceleration as:.
  - "differences" between predicted age and chronological age or as
  - "residuals" after regressing predicted age on chronological age
    using a non linear loess.
- dataset: "All". Select the dataset in where to perform analyses:
    "All", "Vald" (Cohort C07 G08) "Validate2" (Pool of cohorts), "All_held_out" (Includes all samples held out during the training process [Vald + Validate2]), "train" (Training set only).

```{r libraries, echo=TRUE, include=FALSE}
extrafont::loadfonts(device="win")
library("ggplot2")
library("tidyverse")
library("dplyr")
library("survival") 
library("Metrics")
library("h2o")
library("data.table")
library("Metrics")
library("eha")
library("kableExtra")
library("quantreg")
library("exact2x2")
library("utils")
library("LaplacesDemon")
library("lme4")

```

##  Retrieve data and predict

```{r Retrieve Advia}
load(paste0(patho,"Tables/Transitions/ALL_merged_for_modeling_72_10_18_.Rdata",sep=""))
patho<-"W:/0016_Hematological_Clock_2023/"
Survival_CMS <- read_csv(paste(patho,"Tables/Source/survival_detailed_2023-07-25.csv",sep=""),col_types = cols(cohort = col_factor(levels = c("1",
"2", "3", "4", "5", "6", "7", "8",
"9", "10")), sex = col_factor(levels = c("F",
"M")), strain = col_factor(levels = c("B6",
"HET3")), tod = col_date(format = "%m/%d/%Y"),
dob = col_date(format = "%m/%d/%Y"),
dead_censor_nat = col_factor(levels = c("0",
"1"))))
#filter animals cohort 1-10 and natural death
CMS<-Survival_CMS %>% mutate(ID=as.factor(paste0("C",idno,dif="")),
                             lifespan=age_wk) %>% 
                              select("ID","project","cohort","lifespan",
                                     "cod","sex","strain","dead_censor_nat") %>% 
                                filter(project=="SLAM"& !is.na(cohort) & dead_censor_nat==1) %>% as.data.frame()
```

Update survival after final diagnosis by NIA-NIH veterinarians (CMS)

```{r}
update_mortality<-function(df){
      #merge the Advia dataset with CMS-> NAs for non natural death
      df <- df %>%
      left_join(., CMS, by = "ID") 
      #Build a natural death censor with same values for JAX 
      df<-df %>% mutate(
      final_lifespan= ifelse(strain.x=="DO",lifespan.x,lifespan.y))
      #Build a lifespan variable with same values for JAX
      df <- df %>% mutate(
      final_natural_death=ifelse(strain.x=="DO",natural_death,natural_death))
      #Update natural death censor and lifespan according to final NIA-CMS veterinarian report
      df <- df %>% mutate(#Correct lifespan as per NIH-CMS  
      final_lifespan= ifelse(strain.x!="DO"& is.na(dead_censor_nat),
                             lifespan.x,final_lifespan))
      df<-df %>% mutate(# Censor animals not in NIH-CMS natural death
      final_natural_death=ifelse(is.na(final_natural_death),
                                 0,final_natural_death))  
      df<-df %>% select(!c("project.y","dead_censor_nat","cohort.y","lifespan.y","cod","sex.y","strain.y")) %>% filter(final_lifespan!=0)
      namess<-gsub("\\.x","",colnames(df))
      colnames(df)<-namess
      df$strain=as.factor(df$strain)
      df$sex=as.factor(df$sex)
      df$cohort=as.factor(df$cohort)
      df$ID=as.factor(as.character(df$ID))
#Two records with no CMS identification in Advia. From 12.010 to 12.008       
      return(df)
}
```



```{r}
Animals<-rbind(train,vald,validate2)
Animals %>%
  group_by(ID, sex,strain) %>%
  summarise(Animals = n_distinct(ID)) %>%
  group_by(sex,strain) %>%
  summarise(Num_Individuals = sum(Animals >= 1))
```



```{r}
train<-update_mortality(train)
validate2<-update_mortality(validate2)
vald<-update_mortality(vald)
```

1)  Function add deltas

```{r}
Add_delta_variable<-function(df,V1,id){
  ftr<-data.table(df)
  V1<-V1
  V2 <- paste("Delta", V1, sep=".")
  BB<-ftr[, (V2) := .SD-shift(.SD, type='lag'), by = ID, .SDcols=V1]
  BB<-as.data.frame(BB)
  BB[is.na(BB)]<-0
  return(BB)
}
```

### Select features to add delta (No categoricals)

```{r}
Features<-c("rbc","mcv","mchc","mch","chcm","hdw"  
,"wbc","plt","glucose","bw")
```

------------------------------------------------------------------------

```{r}
Features
```

------------------------------------------------------------------------

### Load best DNN after tuning

```{r, echo=TRUE}
library(h2o)
h2o.init()
pat<-paste0(patho,"Models/Models_tunning/DNN_blood_62_N1691016783.zip",sep="")
imported_model <- h2o.import_mojo(pat)

```

### Predict using the best DNN tuned

```{r}
train$dataset<-"train"
validate2$dataset<-"validate2"
vald$dataset<-"vald"
data_all<-rbind(train,validate2,vald)
data_all<-Add_delta_variable(data_all,Features,id="ID")
Validate <- as.h2o(data_all)
Hematology_Based_Age<-h2o.predict(object = imported_model, newdata =Validate)
    Hematology_Based_Age<-as.vector(round(Hematology_Based_Age,digit=0))
data_all$predicted_age<-Hematology_Based_Age 
```

Select Dataset to run the analysis according to parameter params$dataset

```{r,warning=FALSE}

  if(params$dataset == "All_held_out"){
    data_all<-data_all[data_all$dataset!="train",]}
  if(params$dataset == "train"){
    data_all<-data_all[data_all$dataset=="train",]}
  if(params$dataset == "vald"){
    data_all<-data_all[data_all$dataset=="vald",]}
 if(params$dataset == "validate2"){
    data_all<-data_all[data_all$dataset=="validate2",]}

```

Select the sex and the strain according to the parameters sex and strain

```{r,warning=FALSE}
if(params$sex != "All"){
 data_all<-data_all %>% filter(sex==params$sex)
 CMS<-CMS %>% filter(sex==params$sex)
 Sx<-unique(as.character(train$sex))
cat("Sex = ", Sx)
}
```

```{r,warning=FALSE}
if(params$strain != "All"){
 data_all<-data_all %>% filter(strain==params$strain)
 CMS<-CMS %>% filter(strain==params$strain)
 St<-unique(as.character(train$strain))
 cat("Strain = ", St)
 }
```

```{r}
if(params$strain == "All"){St<-"All"}
if(params$sex == "All"){Sx<-"All"}
if(params$dataset == "All"){Sv<-"All"}

```

### Transform survival dataframe in extended

Transform the data frame into extended START/STOP-format to compute the
Age_acceleration as a time dependent co-variate with multiples values
for the same ID across age.






```{r}
#Build the time dependent dataframe with mortality
data_all$ID<-as.character(data_all$ID)
df_indep<-data_all %>% group_by(ID) %>% 
  summarise(endpt=first(final_natural_death),
            final_lifespan=first(final_lifespan),
            cohort=first(cohort),
            dataset=first(dataset),
            strain=first(strain),
            final_natural_death=first(final_natural_death),
            project=first(project),
            sex=first(sex)) %>% tidyr::drop_na() %>% filter(final_lifespan!=0)
df_indep1 <-
  tmerge(data1=df_indep,
         data2=df_indep,
         id=ID,
         event=event(final_lifespan, endpt))


df_dep<-data_all %>% select(ID,wave,all_of(Pheno),final_lifespan,final_natural_death,predicted_age,age_wk) %>% 
  mutate(predicted_age=round(predicted_age,digit=1))#Include tolerance to keep the record

#Consider animals with lifespan equals last blood test = not natural death 
df_final <-
  tmerge(data1=df_indep1,
         data2=df_dep,
         id=ID,
         predicted_age=tdc(age_wk, predicted_age))

df_final<-df_final%>% tidyr::drop_na() %>% mutate(age_wk=round(tstart,1),
                                                  tstart=round(tstart,1),
                                                  tstop=round(tstop,digits=1))



```






Remove non natural death and count animals by frequency

```{r}
# Filter natural death
AA<-df_final %>% filter(final_natural_death==1) %>%  
               mutate(status=as.numeric(as.character(event))) %>% 
                                                select(-c(endpt,event)) %>% 
relocate(status,.after = tstop)
cat("Animals (natural death only): ",length(unique(AA$ID)),"Sex: ",params$sex," Strain:  ",St)
```

```{r}
BBB<-as.data.frame(table(AA$ID)) %>% 
group_by(Freq) %>% summarise(mice=n())
kable(BBB) %>% kable_styling(bootstrap_options = "striped", full_width = FALSE)

```



```{r}
CCC<-AA %>% 
group_by(strain, sex) %>% summarise(count = n_distinct(ID))
kable(CCC) %>% kable_styling(bootstrap_options = "striped", full_width = FALSE)
```
## Acceleration
### Include Acceleration in the model as a time dependent risk factor

### Calculate acceleration depending on the method selected

```{r}
if(params$method=="residuals"){
  model_loess <- loess(predicted_age~age_wk,AA)
  AA<-AA%>% tidyr::drop_na() %>% mutate(Acceleration=model_loess$residuals)
}else{
  AA<-AA%>% tidyr::drop_na() %>% mutate(Acceleration=predicted_age-age_wk)}
```

```{r}
BB<- AA %>% select(-c(5,3)) %>% head(20)
```

```{r}
kable(BB) %>%
  kable_styling(bootstrap_options = "striped", full_width = FALSE)
```

```{r}
#cleanning

rm(df_final,df_indep,df_indep1,df_dep)
```

## Survival 
### Acceleration (continous variable)
Acceleration as risk factor (time dependent)

```{r}
cat("Sex: ",params$sex) 
cat("Strain: ",params$strain)  
cat("Method: ",params$method)
cat("Dataframe: ",params$dataset)
```

Cox extended model for: 

```{r}
#Refactorize for modeling stratified
AA$project<-as.factor(as.character(AA$project))
AA$cohort<-as.factor(as.character(AA$cohort))
AA$strain<-as.factor(as.character(AA$strain))
AA$sex<-as.factor(as.character(AA$sex))
AA$ID<-as.factor(as.character(AA$ID))
```

```{r}
#Save the dataset 
pat<-paste0(patho,"Tables/Output/Mortality_extended.csv",sep="")
if(params$dataset=="All"){write.csv(AA,file=pat)
rm(pat)}
```


```{r}
if (params$sex!="All" & params$strain != "All" ){
formula1<-as.formula("Y~Acceleration+age_wk")
formula2<-as.formula("Y~Acceleration+strata(age_wk)+strata(cohort)")
Y<-Surv(time = AA$tstart,time2 = AA$tstop,AA$status)
mod1<-phreg(formula1, dist="gompertz",param="rate",data=AA)
mod2<-coxph(formula2,id=ID,data = AA)
mod22<-coxph(formula1,id=ID,data = AA)
}
```


```{r}
if (params$sex =="All" & params$strain != "All"){
formula1<-as.formula("Y~Acceleration+age_wk+sex")
formula2<-as.formula("Y~Acceleration+strata(age_wk)+strata(cohort)+strata(sex)")
Y<-Surv(time = AA$tstart,time2 = AA$tstop,AA$status)
mod1<-phreg(formula1, dist="gompertz",param="rate",data=AA)
mod2<-coxph(formula2,id=ID,data = AA)
mod22<-coxph(formula1,id=ID,data = AA)
}
```


```{r}
if (params$sex !="All" & params$strain == "All" ){
formula1<-as.formula("Y~Acceleration+age_wk+strain")
formula2<-as.formula("Y~Acceleration+strata(age_wk)+strata(cohort)+strata(strain)")
Y<-Surv(time = AA$tstart,time2 = AA$tstop,AA$status)
mod1<-phreg(formula1, dist="gompertz",param="rate",data=AA)
mod2<-coxph(formula2,id=ID,data = AA)
mod22<-coxph(formula1,id=ID,data = AA)
}
```


```{r}
if (params$sex !="All" & params$strain != "All"){
formula1<-as.formula("Y~Acceleration+ age_wk")
formula2<-as.formula("Y~Acceleration+strata(age_wk)+strata(cohort)")
Y<-Surv(time = AA$tstart,time2 = AA$tstop,AA$status)
mod1<-phreg(formula1, dist="gompertz",param="rate",data=AA)
mod2<-coxph(formula2,id=ID,data = AA)
mod22<-coxph(formula1,id=ID,data = AA)
}
```


```{r}
if (params$sex =="All" & params$strain == "All"){
formula1<-as.formula("Y~Acceleration+age_wk+sex+strain")
formula2<-as.formula("Y~Acceleration+strata(age_wk)+strata(cohort)+strata(sex)+strata(strain)")
Y<-Surv(time = AA$tstart,time2 = AA$tstop,AA$status)
mod1<-phreg(formula1, dist="gompertz",param="rate",data=AA)
mod2<-coxph(formula2,id=ID,data = AA)
mod22<-coxph(formula1,id=ID,data = AA)
}
```

#### Cox
```{r}
cat("Sex: ",params$sex,". Strain: ",params$strain,". Acceleration = ", params$method,". Dataset = ", params$dataset)
```

```{r}
formula2
```

```{r}
summary(mod2)
```


#### Gompertz

```{r}
formula1
```

```{r}
summary(mod1)
```

### Acceleration (categorical)
Three quantiles (Age acceleration)
Identify high and low acceleration from the acceleration distribution
(Tercile tails). Include those labels (T1, T2 and T3) as a
time-dependent predictor in the models. This quantifies specific time
per mouse being on each top, mid, or bottom tercile.

Important to notice: One mouse can change within terciles so it can be
in T1 at time point x and T3 at time point x+1 and viceversa

```{r}
if(params$strain=="DO"){AA<-AA[AA$ID!="JDO.0014",]}
AA$Q<-ntile(AA$Acceleration,3)
AA$Q<-as.factor(paste0("Tercile",AA$Q))
Terciles<-AA
```

```{r}
kable(head(AA)) %>%
  kable_styling(bootstrap_options = "striped", full_width = FALSE)
```


```{r}
if (params$sex != "All" & params$strain != "All"){
formula1<-as.formula("Y~Q+age_wk")
formula2<-as.formula("Y~Q+strata(age_wk)+strata(cohort)")
Y<-Surv(time = Terciles$tstart,time2 = Terciles$tstop,Terciles$status)
mod3<-phreg(formula1, dist="gompertz",param="rate",data=Terciles)
mod4<-coxph(formula2,id=ID,data = Terciles)
}
```


```{r}
if (params$sex =="All" & params$strain != "All"){
formula1<-as.formula("Y~Q+age_wk+sex")
formula2<-as.formula("Y~Q+strata(age_wk)+strata(cohort)+strata(sex)")
Y<-Surv(time = Terciles$tstart,time2 = Terciles$tstop,Terciles$status)
mod3<-phreg(formula1, dist="gompertz",param="rate",data=Terciles)
mod4<-coxph(formula2,id=ID,data = Terciles)
mod42<-coxph(formula1,id=ID,data = Terciles)
}
```


```{r}
if (params$sex !="All" & params$strain == "All"){
formula1<-as.formula("Y~Q+age_wk+strain")
formula2<-as.formula("Y~Q+strata(age_wk)+strata(cohort)+strata(strain)")
Y<-Surv(time = Terciles$tstart,time2 = Terciles$tstop,Terciles$status)
mod3<-phreg(formula1, dist="gompertz",param="rate",data=Terciles)
mod4<-coxph(formula2,id=ID,data = Terciles)
mod42<-coxph(formula1,id=ID,data = Terciles)}
```


```{r}
if (params$sex =="All" & params$strain == "All"){
formula1<-as.formula("Y~Q+age_wk+sex+strain")
formula2<-as.formula("Y~Q+strata(age_wk)+strata(sex)+strata(cohort)+strata(strain)")
Y<-Surv(time = Terciles$tstart,time2 = Terciles$tstop,AA$status)
mod3<-phreg(formula1, dist="gompertz",param="rate",data=Terciles)
mod4<-coxph(formula2,id=ID,data = Terciles)
mod42<-coxph(formula1,id=ID,data = Terciles)}


```

#### Cox

```{r}
cat("Sex: ",params$sex,". Strain: ",params$strain,". Acceleration = ", params$method,". Dataset = ", params$dataset)
```

```{r}
formula2
```



```{r}
summary(mod4)
```

#### Gompertz

```{r}
formula1
```

```{r}
summary(mod3)
```

### Kaplan-Meier curves

```{r }
Ter<-Terciles[Terciles$Q!="Tercile2",]
Ter$Q<-as.factor(as.character(Ter$Q))
moCox<-survfit(Surv(tstart, tstop, status)~Q,Ter)
mod4_summary <- summary(mod4)
coeff<-mod4_summary$conf.int[2,]
pv<-round(mod4_summary$coefficients[2,5],digits=3)
pv<-ifelse(pv==0,"<0.001",pv)
HR<-paste0("HR(T3vsT1): ",round(coeff[1],digits = 2),"(",round(coeff[3],digits = 2),"-",round(coeff[4],digits = 2),"); p=",pv)

library(survminer)
if(params$dataset=="All"){eti<-"All animals "}
if(params$dataset=="validate2"){eti<-"Validation 2 set "}
if(params$dataset=="vald"){eti<-"Cohort C07-G08 set "}
if(params$dataset=="All_held_out"){eti<-"Validation"}
if(params$dataset=="train"){eti<-"Training set"}


Title<-paste0(eti, ": n = ",sum(table(unique(Terciles$ID))),"; ",HR,sep="")

KM1<-ggsurvplot(moCox, data = Ter,
                subtitle=Title,size = 0.4,
           ylab = "Survivorship", 
           conf.int = F,censor=F,
           legend="none",
           xlab = "Age (Weeks)", xlim = c(25,200),
           palette = c("Dark Green","Red"),
           ggtheme=theme_linedraw(base_size=8, base_family = "Helvetica"))

KM2<-ggpar(KM1, 
      font.main = c(7),
      font.x = c(7),
      font.y = c(7),
      font.caption = c(7, "bold"), 
      font.legend = c(4), 
      font.tickslab = c(4),
      font.subtitle = 4)

print(KM2)
KM3<-KM2$plot
ggsave(paste0(patho,"Plots/Survi_wide_",params$dataset,"_sx_",params$sex,"_st",params$strain,".tiff",sep=""),
KM3, device = "tiff", dpi = 450, width = 6, height = 3.5, units = "cm")

ggsave(paste0(patho,"Plots/Survi_normal_",params$dataset,"_sx_",params$sex,"_st",params$strain,".tiff",sep=""),
KM3, device = "tiff", dpi = 450, width = 6, height = 6, units = "cm")
```

```{r}
moCox2<-survfit(Y~cohort,id=ID,data = Terciles)
```

```{r}
KM1<-ggsurvplot(moCox2, data = Terciles,
                title=Title,
    legend.title = "Acceleration: ",
           ylab = "Survivorship\n\n", 
    conf.int = F,
           xlab = "\n\n Age (Weeks)", xlim = c(25,250),
           surv.median.line = "hv",
           ggtheme=theme_minimal())
KM2<-ggpar(KM1, 
      font.main = c(14),
      font.x = c(13),
      font.y = c(13),
      font.caption = c(12, "bold"), 
      font.legend = c(8), 
      font.tickslab = c(10, "bold"))
```

```{r}
KM2
```

## Lifespan 
### Identify loger survivors
### Three Terciles in Lifespan (Not acceleration)
```{r}
cat("Sex: ",params$sex,". Strain: ",params$strain,". Acceleration = ", params$method,". Dataset = ", params$dataset)

```
```{r}
qq<-3
#filter(strain!="DO") %>%
B2<-AA%>%  group_by(ID) %>% summarise(max = max(final_lifespan)) %>% mutate(Class = ntile(max,qq)) %>% filter(Class==1|Class==qq)
```

Mean Lifespan per group
```{r}
#colnames(B)[2]<-"Lifespan"
AB<-B2 %>% left_join(AA,by = "ID") 
Means<-aggregate(final_lifespan~Class,data=AB,mean)
AB$Class<-as.factor(AB$Class);levels(AB$Class)<-c("Short (T1)",paste0("Long (T",qq,")"))
AB$ID<-as.factor(AB$ID)
kable(Means)%>%
  kable_styling(bootstrap_options = "striped", full_width = FALSE)
```
Acceleration per animal and class
```{r}
Agg<-aggregate(Acceleration~ID+Class,mean,data=AB)
mo<-lm(Agg$Acceleration~Agg$Class)
sum<-summary(mo)
```

```{r}
pval<-summary(mo)$coefficients[2, 4]
Title<-paste(eti,"n=", dim(Agg)[1], "; Sex = ",params$sex,"; Strain = ",params$strain,"; p =",pval)
BP <- ggplot(AB, aes(Class,Acceleration,fill=Class))
BP<-BP + geom_boxplot(outlier.colour = "red",outlier.alpha = 0.1,notch = TRUE, size=0.3) +labs(subtitle=Title)+
  scale_fill_manual("Lifespan",values=c("red", "darkgreen"),labels = c("Short (T1)", "Long (T3)"))+
  ylab("Age acceleration")+ 
            xlab("Lifespan")+ ylim(-60,+60)+
   theme(legend.position = "none",
         panel.background = element_rect(fill = "white"),
        axis.text = element_text(size = 6),
        axis.title = element_text(size = 6),
        plot.subtitle = element_text(size = 4),
        panel.border = element_rect(color = "black",
                                    fill = NA,
                                    size = 0.5),
        panel.grid.major = element_line(size = 0.15, linetype = 'solid',
                                colour = "grey"), 
        panel.grid.minor = element_line(size = 0.15, linetype = 'solid',
                                 colour = "grey")
        )
ggsave(paste0(patho,"Plots/BoxPlot_Accelerations_",params$dataset,"_sx",params$sex,"_st",params$strain,".tiff",sep=""),
BP, device = "tiff", dpi = 450,width = 6, height = 7, units = "cm")
BP
```


Longitudinal trajectories of acceleration
```{r}

AB$ID<-as.factor(AB$ID)
library(ggplot2)
NNN<-sum(table(AB$ID))
NN<-sum(table(unique(AB$ID)))
MM<-ggplot(data = AB, aes(x = age_wk, y = Acceleration, group = ID, colour = Class))+
  geom_line(size=0.1) +
  theme(panel.background = element_rect(fill = "wheat"),
        axis.text = element_text(size = 15),
        axis.title = element_text(size = 15),
        plot.margin = margin(1,1,1.5,1.2, "cm"))+
  scale_color_manual("Lifespan",values=c("Red","Dark green"))+
  xlab("Chronological age (weeks)")+
  ylab("Age Acceleration")+
  geom_hline(yintercept = 0, col="brown")+
 annotate(geom="text", x=120, y=25, label=paste0("N mice = ",as.character(NN)),
           color="Black",size = 3.5)+
  annotate(geom="text", x=120, y=35, label=paste0("N observations = ",as.character(NNN)),
           color="Black",size = 4.5)
MM
```

```{r}
cat("Sex: ",params$sex,". Strain: ",params$strain,". Acceleration = ", params$method,". Dataset = ", params$dataset)
```


### LMM to test acceleration in long survivors

LMM to check whether belonging to long-survival group (Lifespan Tercile
3) encompasses slower age-acceleration.

### Method 1 (Age = % lifespan)

```{r}
if (params$sex!="All" & params$strain != "All" ){
formula3<-as.formula("scale(Acceleration) ~ Class +  scale(relative_age_logit) + (1|cohort) + (scale(relative_age_logit) | ID)")
}
```


```{r}
if (params$sex =="All" & params$strain != "All" ){
formula3<-as.formula("scale(Acceleration) ~ Class + sex + scale(relative_age_logit) + (1|cohort) + (scale(relative_age_logit) | ID)")
}
```


```{r}
if (params$sex !="All" & params$strain == "All" ){
formula3<-as.formula("scale(Acceleration) ~ Class +  scale(relative_age_logit) + (1|strain) + (1|cohort) + (scale(relative_age_logit) | ID)")
}
```


```{r}
if (params$sex =="All" & params$strain == "All" ){
formula3<-as.formula("scale(Acceleration) ~ Class + sex + scale(relative_age_logit) + (1|strain) + (1|cohort) + (scale(relative_age_logit) | ID)")}

```

```{r}
formula3
```


```{r}
AB$relative_age<-round(AB$age_wk/AB$final_lifespan,digits = 2)
AB$relative_age_logit<-logit(AB$relative_age/100)
mod10 <- lmer(formula3, AB)
summary(mod10, cor=T)
```

### Method 2 (Age)

Strategy to make groups comparable: Because of mortality there is no
samples beyond week 105 in the Q1 sub-population. Sub sample Q3 to
maximum age in Q1 equals to 105. This makes the two groups to have same
time-points.
```{r}
cat("Sex: ",params$sex,". Strain: ",params$strain,". Acceleration = ", params$method,". Dataset = ", params$dataset)
```
Maximun Lifespan per group
```{r}
Max<-AB %>% group_by(Class) %>% summarise(max=max(final_lifespan))
kable(Max)%>%
  kable_styling(bootstrap_options = "striped", full_width = FALSE)
```



```{r}
if (params$sex!="All" & params$strain != "All" ){
formula4<-as.formula("scale(Acceleration) ~ Class +  scale(relative_age_logit) + (1|cohort) + (scale(relative_age_logit) | ID)")
}
```


```{r}
if (params$sex =="All" & params$strain != "All" ){
formula4<-as.formula("scale(Acceleration) ~ Class + sex + scale(age_wk)  + (1|cohort) + (scale(age_wk) | ID)")
}
```


```{r}
if (params$sex !="All" & params$strain == "All" ){
formula4<-as.formula("scale(Acceleration) ~ Class + scale(age_wk) + (1|strain) + (1|cohort) + (scale(age_wk) | ID)")}
```



```{r}
if (params$sex =="All" & params$strain == "All" ){
formula4<-as.formula("scale(Acceleration) ~ Class + sex + scale(age_wk) + (1|strain) + (1|cohort) + (scale(age_wk) | ID)")}

```

LMM to test acceleration and lifespan categorical
```{r}

mod11 <- lmerTest::lmer(formula4, subset(AB, age_wk <= 105))
summary(mod11, cor=T)
```
Plot acceleration and lifespan longitudinal
```{r}
ZZ<-ggplot(data = AB, aes(x = age_wk, y = Acceleration, colour = Class))+
  geom_smooth(method = "lm", size=1, se=T) +labs(subtitle=Title)+
  geom_jitter(alpha=0.1, size=1)+ylim(-60,+60)+ xlim(0,160)+
  theme(legend.position = "bottom",
        legend.text=element_text(size=5),
        panel.background = element_rect(fill = "white"),
        axis.text = element_text(size = 5),
        plot.subtitle = element_text(size = 4),
        axis.title = element_text(size = 7),
        panel.border = element_rect(color = "black",
                                    fill = NA,
                                    size = 0.5),
        panel.grid.major = element_line(size = 0.15, linetype = 'solid',
                                colour = "grey"), 
        panel.grid.minor = element_line(size = 0.15, linetype = 'solid',
                                 colour = "grey"))+
  scale_color_manual("Lifespan",values=c("Red","Dark green"))+
  xlab("Chronological age (weeks)")+
  ylab("Age acceleration")#+
  #geom_hline(yintercept = 0, col="grey1")

ggsave(paste0(patho,"Plots/Longitudinal_",params$dataset,"_sx",params$sex,"_st",params$strain,".tiff",sep=""),
ZZ, device = "tiff", dpi = 450,width = 6, height = 7,
  units = c("cm"))
```

Plot Lifespan and acceleration cross-sectional
```{r}
AA<-AA %>% mutate(`Lifespan (weeks)`=final_lifespan)
ZZL<-ggplot(data = AA, aes(x = age_wk, y = Acceleration, colour = `Lifespan (weeks)`))+
  geom_jitter(alpha=0.6, size=2, height = 10)+ylim(-60,+60)+ xlim(0,160)+geom_smooth(method = "lm",size=0.2)+
  theme(panel.background = element_rect(fill = "white"),
        axis.text = element_text(size = 9),
        axis.title = element_text(size = 9),
        panel.border = element_rect(color = "black",
                                    fill = NA,
                                    size = 0.5),
        panel.grid.major = element_line(size = 0.15, linetype = 'solid',
                                colour = "grey"), 
        panel.grid.minor = element_line(size = 0.15, linetype = 'solid',
                                 colour = "grey"))+
  
       xlab("Chronological age (weeks)")+
  ylab("Age acceleration")#+
  #geom_hline(yintercept = 0, col="grey1")
ZZL<-ZZL+ scale_color_gradientn(colours = c("yellow","yellow","green4","blue4"), limits=c(20,180))
ZZL


ggsave(paste0(patho,"Plots/Longitudinal_delta.tiff",sep=""),
ZZL, device = "tiff", dpi = 450,width = 12, height = 6,
  units = c("cm"))
```



## Maximun Lifespan
Select animals with 2 or more blood samples, and extract the slope of their acceleration trajectories. 
Regress lifespan on slope (adjusted by covariates) as a coninouous variable.
Then rank the slopes and determine terciles. Finally, compare maximum lifespan calculated as described in the paper by Wang-Allison (2004) between groups with higher acceleration SLOPE versus lower (T1vsT3)


```{r}
if(params$method=="residuals"){
  model_loess <- loess(predicted_age~age_wk,data_all)
  CC<-data_all%>% tidyr::drop_na() %>% mutate(Acceleration=model_loess$residuals)
}else{
  CC<-data_all%>% tidyr::drop_na() %>% mutate(Acceleration=predicted_age-age_wk)}
```

### Filter animals with trajectories up to 18 M (81 weeks)
This will eliminate bias due slope difference due to to different number of timepoints


```{r}
#Animals with at least 2 within those with instance of natural death:
df<- CC %>%
  group_by(ID) %>%
  filter(n() > 2) %>% filter(final_natural_death==1) %>% 
    filter(age_wk<=81) # remove non natural death
df<- data.table(df)
df<-as.data.frame(df)
Filtered_mice<-sum(table(unique(df$ID)))
cat("Total animals with at least 2 timepoints: ",Filtered_mice)

```

### Calculate slope per animal using LMM

```{r}
if (params$sex!="All" & params$strain != "All" ){
formula5<-as.formula("acceleration_sc~age_sc+(age_sc|ID)+(age_sc|cohort)")
}
```


```{r}
if (params$sex =="All" & params$strain != "All" ){
formula5<-as.formula("acceleration_sc~sex+age_sc+(age_sc|ID)+(age_sc|cohort)")
}
```


```{r}
if (params$sex !="All" & params$strain == "All" ){
formula5<-as.formula("acceleration_sc~age_sc+(age_sc|ID)+(age_sc|cohort)+(age_sc|strain)")
}
```


```{r}
if (params$sex =="All" & params$strain == "All" ){
formula5<-as.formula("acceleration_sc~sex+age_sc+(age_sc|ID)+(age_sc|cohort)+(age_sc|strain)")}
```


```{r}
df$acceleration_sc<-scale(df$Acceleration)
df$age_sc<-scale(df$age_wk)
amod<-lmer(formula5,df)
summary(amod)
```
###
```{r}
#extract the estimates of those trajectories per animal and build terciles.
nn<-3 #n-ciles
random_estimates<-ranef(amod)[["ID"]]
colnames(random_estimates)<-c("Intercept","Slope")
RE<-random_estimates %>% mutate(ratio_inter_slop= Intercept/Slope,Class_Slp = dplyr::ntile(Slope,n=nn)) %>% 
                     rownames_to_column("ID") %>% as.data.frame 

kable(head(RE))%>%
  kable_styling(bootstrap_options = "striped", full_width = FALSE)
```
### Categorize slopes and compare tails of the Slope distribution

```{r}

#accelerated (Top Quantile)
### Analize relationship Acc.slope-lifespan
df<-df %>% left_join(RE, by="ID")%>% data.table %>% as.data.frame
 kable(head(df))%>%
  kable_styling(bootstrap_options = "striped", full_width = FALSE)
# colnames(df)[c(13,14)]<-c("Acceleration","Age_Scaled")
```

#### Accelerated T3
```{r}
Accelerated<-df[df$Class_Slp==nn,] 
Accelerated<-Accelerated %>% group_by(ID) %>% arrange(desc(Slope)) 



```
***
#### Decelerated T1
```{r}
Decelerated<-df[df$Class_Slp==1,] 
Decelerated<-Decelerated %>% arrange(desc(Slope)) 


```

```{r}
#build a dataframe 
df2<-rbind(Accelerated,Decelerated)
df2$Class_Slp<-as.factor(as.character(df2$Class_Slp))
df2<-df2 %>% distinct(ID, .keep_all = TRUE)
mice<-length(df2$ID)
cat("Total mice (Accelerated + Decelerated): ",mice)

```
***

### Wang-Allison analysis.
Compares maximum lifespan between groups.
Quantile regression coupled with Boschloo's test

```{r}

Threshold<-rq(lifespan ~ 1, tau=0.90, data = df2)
Th<-Threshold$coefficients[[1]]
cat("P90 lifespan for the group:", Th," weeks")

```


#### Individual living beyond the threshold by group.
##### Accelerated
```{r}
AAA<-Accelerated[which(Accelerated$lifespan
                   >=Th),] %>% distinct(ID)
Mice_minus_AAA<-Accelerated[which(Accelerated$lifespan
                   <Th),] %>% distinct(ID)
sort(AAA$ID, decreasing = FALSE)

```

##### Decelerated
```{r}
DDD<-Decelerated[which(Decelerated$lifespan
                   >=Th),] %>% distinct(ID)
Mice_minus_DDD<-Decelerated[which(Decelerated$lifespan
                   <Th),] %>% distinct(ID)

sort(DDD$ID, decreasing = FALSE)
```

Ratio: Above P90 / Below P90 Decelerated
```{r}
RD<-length(DDD$ID)/length(Mice_minus_DDD$ID)
PP<-round(RD,digits=2)    
cat("Decelerated: Above P90 = ",length(DDD$ID),
    "/ Below P90 = ",
    length(Mice_minus_DDD$ID),
    ".  Ratio: ", PP)
```


Ratio: Above P90 / Below P90 Accelerated
```{r}
RA<-length(AAA$ID)/length(Mice_minus_AAA$ID)
PP<-round(RA,digits=2)    
cat("Accelerated: Above P90 = ",length(AAA$ID),
    "/ Below P90 = ",
    length(Mice_minus_AAA$ID),
    ".  Ratio: ", PP)    

```

### Boschloo's test

Rationale to apply: The table we obtain is unconditional (meaning we didn't know the sums for rows or column when designing the experiment). It requires an unconditional test.

Fisher's test is fully conditional, it could be opposed in this setting.

Boschloo's test is an exact unconditional test for 2x2 tables based on ordering the sample space by Fisher's exact p-values.

```{r}
Above_acc<-length(AAA$ID)
Bellow_Acc<-length(Mice_minus_AAA$ID)
Above_dec<-length(DDD$ID)
Bellow_dec<-length(Mice_minus_DDD$ID)
```


```{r, eval=TRUE}
model_Bosch<-boschloo(Above_acc,Bellow_Acc,
                      Above_dec,Bellow_dec,
                      alternative = "two.sided")
```
### Results:


```{r,eval=TRUE}
model_Bosch
```

### Analize relationship lifespan~Acc.slope
```{r}
if(params$sex=="All"&params$strain=="All"){
df3<-df %>% distinct(ID, .keep_all=TRUE)
mo_sp<-lmerTest::lmer(lifespan~Slope+sex+age_wk+strain+(1|cohort),df3,REML = F)
summary(mo_sp)
}
```
```{r}
if(params$sex=="All"&params$strain=="All"){
df3<-df %>% distinct(ID, .keep_all=TRUE)
mo_sp2<-lmerTest::lmer(lifespan~Slope+sex+strain+(1|cohort),df3,REML = F)
summary(mo_sp2)
}
```
```{r}
anova(mo_sp,mo_sp2)
```




Only DO
```{r}
do<-df3 %>% filter(strain=="DO")
mo_sp<-lm(lifespan~Slope+sex,do)
summary(mo_sp)
```

Only B6
```{r}
no_do<-df3 %>% filter(strain=="B6")
mo_sp<-lmerTest::lmer(lifespan~Slope+sex+(1|cohort),no_do)
summary(mo_sp)
```
HET3
```{r}
no_do<-df3 %>% filter(strain=="HET3")
mo_sp<-lmerTest::lmer(lifespan~Slope+sex+(1|cohort),no_do)
summary(mo_sp)
```

Plot example of acceleration trajectories
```{r}
Accelerated$Tr<-"Accelerated"
Decelerated$Tr<-"Decelerated"
if(params$dataset=="All"){
da<-rbind(Accelerated,Decelerated)
da<-da %>% filter(ID%in%c("C1372","C1378","C822","C1446"))
plot_tr<-ggplot(data = da,  aes(x = age_wk, y = acceleration_sc))+
  geom_point( alpha = .3, size=2,col="brown")+
  theme_minimal()+xlim(0,90)+
  theme(
    panel.grid = element_blank(),
    panel.grid.major = element_line(color = "black", size = 0.02), 
    panel.grid.minor= element_line(color = "black", size = 0.02),
    panel.background = element_rect(fill = "white")
    )+
  geom_smooth(method = "lm", col="blue")+
  scale_color_manual("Blood Acceleration\nGroup",values=c("Red","Dark green"))+
  xlab("Chronological Age (weeks)")+ 
  ylab("Acceleration (scaled)")+
  facet_wrap(Tr~ID,scales = "free_x",)
  
  
plot_tr

ggsave(paste0(patho,"Plots/Wang_trajectories_narrow.tiff",sep=""),
plot_tr, device = "tiff",width = 9, height = 9,
  units = c("cm"), dpi = 450)
}
```


```{r}
sessionInfo()
```


